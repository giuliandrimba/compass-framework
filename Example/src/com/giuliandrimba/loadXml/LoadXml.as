package com.giuliandrimba.loadXml{	import flash.errors.IOError;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.events.EventDispatcher;		public class LoadXml extends EventDispatcher	{		private var _urlRequest:URLRequest;		private var _url:String;		private var _urlLoader:URLLoader;		private var _xml:XML;				public static const LOAD_COMPLETE:String = "loadComplete";		public static const LOAD_PROGRESS:String = "loadProgress";		public static const LOAD_ERROR:String = "loadError";				public function LoadXml($url:String)		{			_url = $url;			_urlLoader = new URLLoader();			Load();			LoaderEvents()		}				private function Load():void		{			_urlRequest = new URLRequest(_url);			_urlLoader.load(_urlRequest);		}		private function LoaderEvents():void		{			_urlLoader.addEventListener(Event.COMPLETE, onComplete)			_urlLoader.addEventListener(ProgressEvent.PROGRESS,onProgress)			_urlLoader.addEventListener(IOErrorEvent.IO_ERROR, onError);		}		private function onComplete(e:Event):void		{			_xml = new XML(e.currentTarget.data);			dispatchEvent(new Event(LOAD_COMPLETE))		}		private function onProgress(e:ProgressEvent):void		{			dispatchEvent(new ProgressEvent(LOAD_PROGRESS))		}		private function onError(e:IOErrorEvent):void		{			dispatchEvent(new IOErrorEvent(LOAD_ERROR))		}				//SET GET				public function get xml():XML { return _xml; }	}}